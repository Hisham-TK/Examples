import { GraphQLResolverMethods } from '../../types/resolversTypes';
import { Comment, Post } from "../types";
import { v4 as uuid } from 'uuid';

const mutationResolvers: GraphQLResolverMethods = {
  createUser(parent, { data }, { db }, info) {
    if (db.users.find((_user) => _user.email === data.email))
      throw new Error('Email is token !');

    const user = { id: uuid(), ...data };
    db.users.push(user);
    return user;
  },
  deleteUser(parent, { id }, { db }, info) {
    const userIndex = db.users.findIndex((_user) => _user.id === id);
    if (userIndex === -1) throw new Error('User not exists');
    const deleteUsers = db.users.splice(userIndex, 1);
    db.posts = db.posts.filter((_post) => {
      const match = _post.author === id;
      if (match)
        db.comments = db.comments.filter(
          (_comment) => _comment.post !== _post.id,
        );
      return !match;
    });
    db.comments = db.comments.filter((_comment) => _comment.author !== id);
    return deleteUsers[0];
  },
  updateUser(parent, { data, id }, { db }, info) {
    const userIndex = db.users.findIndex((_user) => _user.id === id);
    if (userIndex === -1) throw new Error('User not exists');
    if (
      data.email &&
      db.users.findIndex(
        (user) => user.email === data.email && user.id !== id,
      ) > -1
    )
      throw new Error('Email is token');
    db.users[userIndex] = { ...db.users[userIndex], ...data };
    return db.users[userIndex];
  },

  createPost(parent, { data }: {data: Omit<Post, 'id'>}, { db, pubsub }, info) {
    const userExists = db.users.find((_user) => _user.id === data.author);
    if (!userExists) throw new Error('Author is not exists');
    const post = { id: uuid(), ...data };
    db.posts.push(post);
    pubsub.publish(`post`, { post });
    return post;
  },
  deletePost(parent, { id }, { db }, info) {
    const postIndex = db.posts.findIndex((_post) => _post.id === id);
    if (postIndex === -1) throw new Error('Post not exists');
    const deletePosts = db.posts.splice(postIndex, 1);
    db.comments = db.comments.filter((_comment) => _comment.post !== id);
    return deletePosts[0];
  },
  updatePost(parent, { data, id }, { db }, info) {
    const postIndex = db.posts.findIndex((_post) => _post.id === id);
    if (postIndex === -1) throw new Error('Post not exists');
    db.posts[postIndex] = { ...db.posts[postIndex], ...data };
    return db.posts[postIndex];
  },

  createComment(parent, { data }: {data: Omit<Comment, 'id'>}, { db, pubsub }, info) {
    const userExists = db.users.find((_user) => _user.id === data.author);
    if (!userExists) throw new Error('Author is not exists');
    const postExists = db.posts.find((_post) => _post.id === data.post);
    if (!postExists) throw new Error('Post is not exists');
    if (!postExists.published) throw new Error('Post is not published');

    const comment: Comment = { id: uuid(), ...data };
    db.comments.push(comment);
    pubsub.publish(`comment/${data.post}`, { comment });
    return comment;
  },
  deleteComment(parent, { id }, { db }, info) {
    const commentIndex = db.comments.findIndex(
      (_comment) => _comment.id === id,
    );
    if (commentIndex === -1) throw new Error('Comment not exists');
    const deleteComments = db.comments.splice(commentIndex, 1);
    return deleteComments[0];
  },
  updateComment(parent, { data, id }, { db }, info) {
    const commentIndex = db.comments.findIndex(
      (_comment) => _comment.id === id,
    );
    if (commentIndex === -1) throw new Error('Comment not exists');
    db.comments[commentIndex] = { ...db.comments[commentIndex], ...data };
    return db.comments[commentIndex];
  },
};

export default mutationResolvers;
